最简单的做法：
强行背包，乘法，O(n^2)这样
考虑是否能分治？
如果我们现在有1..n/2和n/2...n的答案？
哦向下的话是不行的哈

nk+1...
1 obvious, but then?

2: 1
3: 1
4: 1
5: 1 2 3
6: 1
先排除掉和他不互质的数？yes，否则就相当于找到了逆元了
范围缩小到phi(x)
7: 1 2 3 4 5
8: 1 3 5 7
哦哦哦哦哦！这样的话，考虑互质的数的乘积，然后找一个逆元即可！
不输出mul即可


D:
可能想法是：可不可以枚举出现次数最多的分成多少块，然后剩下的往里面依次填直到每个恰好满足？
所以问题是：分成多少块能使得其他的颜色打掉自己
考虑a<b，b个别的颜色的
b <= (a+b)/2上取整
(a+b)为偶数：(a+b)/2
(a+b)为奇数：(a+b+1)/2

b<=a+1?什么后果
b>=a>=b-1
a==b或者a==b-1？
a==b-2会怎样？
(2b-2)/2上取整 = b-1确实不可能
(2b-1)/2上取整就还是b

所以理论上为了尽量少，应该是能够将最多的颜色的分成k块，每块内部都要至少满足多的比少的最多多一块

所以说，如果我们将大的分成k块，那么我们就能够填补大的和小的之间的差距k个
1.假如区间内最多的数量<长度/2上取整，那么就不算，1
2.其他情况大概是 多的 / (多的-剩下的）上取整？
多的 / 每块个数下取整 = k >= 多的-剩下的
100 - floor(100 / k) <= 100-40
多的个数 - 块数 <= 少的个数
多的个数 - 少的个数 <= 块数 = 多的 / 每块个数 下取整
最小块数好像不就是这个吗？
1 3 3 3 3
3块最少？
(3) (3) (1 3 3)
多的 - (区间长度 - 多的)
多的*2 - 区间长度


好的，问题转化为，区间内出现次数最多的多少个
查了一下，大概是莫队？分块之类的做法哈
